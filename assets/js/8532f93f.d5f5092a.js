"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6959],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6781:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],c={sidebar_position:2},l="Good To Have",s={unversionedId:"code-practice/good_to_have",id:"code-practice/good_to_have",isDocsHomePage:!1,title:"Good To Have",description:"Extracted from Reference",source:"@site/docs/code-practice/good_to_have.md",sourceDirName:"code-practice",slug:"/code-practice/good_to_have",permalink:"/documentation/docs/code-practice/good_to_have",editUrl:"https://github.com/CS203-G1/documentation/docs/code-practice/good_to_have.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"Guide",previous:{title:"Must Haves",permalink:"/documentation/docs/code-practice/must_have"}},u=[{value:"Functions",id:"functions",children:[]},{value:"Comments",id:"comments",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"good-to-have"},"Good To Have"),(0,i.kt)("p",null,"Extracted from ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/gojekengineering/the-basics-of-writing-clean-code-39ed770b626d"},"Reference")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Avoid using ",(0,i.kt)("inlineCode",{parentName:"li"},"if-else")," expressions. Having too many if-else could lead to creating a lot of conditional branch predictions which leads to misprediction - causing potential bugs."),(0,i.kt)("li",{parentName:"ol"},"Avoid passing in ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean")," values, having ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean")," hints that you have an ",(0,i.kt)("inlineCode",{parentName:"li"},"if-else")," expression somewhere in the method."),(0,i.kt)("li",{parentName:"ol"},"Functions should either return a value or change a value, not both. This is to minimize side effects of the logic implementations."),(0,i.kt)("li",{parentName:"ol"},"Code should always be separated with blank lines to club logical blocks together. Think of different lines of code as thoughts and then always think of organising similar thoughts together."),(0,i.kt)("li",{parentName:"ol"},"Don\u2019t return null"),(0,i.kt)("li",{parentName:"ol"},"As much as possible, stay within 5 - 15 lines of code. It fits your screen more easily and it's about the conceptual size that you can hold in your head. If you are writing less than 5 lines, you might be breaking up the code too much. ")),(0,i.kt)("h2",{id:"comments"},"Comments"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Always comment your code to explain what it does."),(0,i.kt)("li",{parentName:"ol"},"Comment if your code has a ",(0,i.kt)("inlineCode",{parentName:"li"},"bad smell")),(0,i.kt)("li",{parentName:"ol"},"Link the articles and tutorials you referenced for your code in the comments."),(0,i.kt)("li",{parentName:"ol"},"Link the articles, tutorials, Stack Overflow forum you referenced to fix bugs."),(0,i.kt)("li",{parentName:"ol"},"Don\u2019t use a comment when you can use a well named Function or a Variable")))}p.isMDXComponent=!0}}]);