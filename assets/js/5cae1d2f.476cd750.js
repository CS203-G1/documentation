"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2080],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),h=r,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6354:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],c={sidebar_position:1},l="Must Haves",s={unversionedId:"code-practice/must_have",id:"code-practice/must_have",isDocsHomePage:!1,title:"Must Haves",description:"DRY Principle",source:"@site/docs/code-practice/must_have.md",sourceDirName:"code-practice",slug:"/code-practice/must_have",permalink:"/documentation/docs/code-practice/must_have",editUrl:"https://github.com/CS203-G1/documentation/docs/code-practice/must_have.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"Guide",previous:{title:"Formatting Guideline",permalink:"/documentation/docs/guideline/format_guideline"},next:{title:"Good To Have",permalink:"/documentation/docs/code-practice/good_to_have"}},p=[{value:"DRY Principle",id:"dry-principle",children:[]},{value:"SOLID Principles",id:"solid-principles",children:[{value:"Single Responsibility Principles",id:"single-responsibility-principles",children:[]},{value:"Open Closed Principles",id:"open-closed-principles",children:[]},{value:"Livkov Substitution Principles",id:"livkov-substitution-principles",children:[]},{value:"Interface Segregation Principles",id:"interface-segregation-principles",children:[]},{value:"Dependency Principles",id:"dependency-principles",children:[]}]}],d={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"must-haves"},"Must Haves"),(0,o.kt)("h2",{id:"dry-principle"},"DRY Principle"),(0,o.kt)("p",null,"Also known as Don't Repeat Yourself. Basically means that you should not have duplicated codes. In the sense that two pieces of code should not do the same thing."),(0,o.kt)("h2",{id:"solid-principles"},(0,o.kt)("a",{parentName:"h2",href:"https://en.wikipedia.org/wiki/SOLID"},"SOLID")," Principles"),(0,o.kt)("p",null,"Summarized from this ",(0,o.kt)("a",{parentName:"p",href:"https://www.bmc.com/blogs/solid-design-principles/#:~:text=SOLID%20is%20an%20acronym%20that,principle%2C%20and%20dependency%20inversion%20principle.&text=Additionally%2C%20they're%20intended%20to,understand%2C%20maintain%2C%20and%20extend."},"Reference")),(0,o.kt)("p",null,"Try to write clean and effective code for enhanced code maintainability."),(0,o.kt)("h3",{id:"single-responsibility-principles"},"Single Responsibility Principles"),(0,o.kt)("p",null,'"A class should have one, and only one, reason to change.\u201d - Robert Martin '),(0,o.kt)("p",null,"Each class should only solve one problem and we should only change it for one reason. "),(0,o.kt)("h3",{id:"open-closed-principles"},"Open Closed Principles"),(0,o.kt)("p",null," \u201cYou should be able to extend a class\u2019s behavior without modifying it.\u201d - Robert Martin "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open for extension, meaning that the class\u2019s behavior can be extended; and"),(0,o.kt)("li",{parentName:"ol"},"Closed for modification, meaning that the source code is set and cannot be changed.")),(0,o.kt)("p",null,"Guideline is to use inheritance or interfaces that allow polymorphic substitutions."),(0,o.kt)("h3",{id:"livkov-substitution-principles"},"Livkov Substitution Principles"),(0,o.kt)("p",null,"Every child class should be replaceable for the parent class."),(0,o.kt)("h3",{id:"interface-segregation-principles"},"Interface Segregation Principles"),(0,o.kt)("p",null,"\u201cMake fine grained interfaces that are client-specific. Clients should not be forced to implement interfaces they do not use.\u201d - Robert Martin "),(0,o.kt)("p",null,"The general idea is to have a lot of smaller interfaces than a few bigger ones."),(0,o.kt)("p",null,"For us, this means that we don\u2019t want to just start with an existing interface and add new methods. Instead, we shgould start by building a new interface and then let our classes implement multiple interfaces as needed. "),(0,o.kt)("p",null,"Smaller interfaces mean that we should have a preference for composition over inheritance and for decoupling over coupling. "),(0,o.kt)("p",null,"According to this principle, we should work to have many client-specific interfaces, avoiding the temptation of having one big, general-purpose interface."),(0,o.kt)("h3",{id:"dependency-principles"},"Dependency Principles"),(0,o.kt)("p",null,"\u201cDepend on abstractions, not on concretions.\u201d - Robert Martin "),(0,o.kt)("p",null,"One popular way to comply with this principle is through the use of a dependency inversion pattern."))}u.isMDXComponent=!0}}]);